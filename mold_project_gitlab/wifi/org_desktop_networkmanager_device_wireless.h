/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p org_desktop_networkmanager_device_wireless -N -i array_of_string_variant.hpp org.freedesktop.NetworkManager.Device.Wireless.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_DESKTOP_NETWORKMANAGER_DEVICE_WIRELESS_H
#define ORG_DESKTOP_NETWORKMANAGER_DEVICE_WIRELESS_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "array_of_string_variant.hpp"

/*
 * Proxy class for interface org.freedesktop.NetworkManager.Device.Wireless
 */
class OrgFreedesktopNetworkManagerDeviceWirelessInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.Device.Wireless"; }

public:
    OrgFreedesktopNetworkManagerDeviceWirelessInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopNetworkManagerDeviceWirelessInterface();

    Q_PROPERTY(QList<QDBusObjectPath> AccessPoints READ accessPoints)
    inline QList<QDBusObjectPath> accessPoints() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("AccessPoints")); }

    Q_PROPERTY(QDBusObjectPath ActiveAccessPoint READ activeAccessPoint)
    inline QDBusObjectPath activeAccessPoint() const
    { return qvariant_cast< QDBusObjectPath >(property("ActiveAccessPoint")); }

    Q_PROPERTY(uint Bitrate READ bitrate)
    inline uint bitrate() const
    { return qvariant_cast< uint >(property("Bitrate")); }

    Q_PROPERTY(QString HwAddress READ hwAddress)
    inline QString hwAddress() const
    { return qvariant_cast< QString >(property("HwAddress")); }

    Q_PROPERTY(qlonglong LastScan READ lastScan)
    inline qlonglong lastScan() const
    { return qvariant_cast< qlonglong >(property("LastScan")); }

    Q_PROPERTY(uint Mode READ mode)
    inline uint mode() const
    { return qvariant_cast< uint >(property("Mode")); }

    Q_PROPERTY(QString PermHwAddress READ permHwAddress)
    inline QString permHwAddress() const
    { return qvariant_cast< QString >(property("PermHwAddress")); }

    Q_PROPERTY(uint WirelessCapabilities READ wirelessCapabilities)
    inline uint wirelessCapabilities() const
    { return qvariant_cast< uint >(property("WirelessCapabilities")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QList<QDBusObjectPath> > GetAccessPoints()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAccessPoints"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > GetAllAccessPoints()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllAccessPoints"), argumentList);
    }

    inline QDBusPendingReply<> RequestScan(wifi::array_of_string_variant options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("RequestScan"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AccessPointAdded(const QDBusObjectPath &access_point);
    void AccessPointRemoved(const QDBusObjectPath &access_point);
    void PropertiesChanged(wifi::array_of_string_variant properties);
};

#endif
