#!/bin/bash

# This should be run at regular intervals (i.e. every hour
# Tries to upload a single file from the log directory

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source $SCRIPT_DIR/log_environment

UPLOAD_FILE=$1
UPLOAD_FILENAME=$(basename $UPLOAD_FILE)

# this will parse out the endpoint from the config file together with the protocol (either http or https)
export LOG_ENDPOINT=$(cat /opt/mold/gui.cfg | perl -ne 'print "http$1://$2" if /^network-url=ws(s*):\/\/([^\/]*)/' 2>/dev/null)
export LOG_BOX_ID=$(cat /etc/hostname)
export LOG_BOX_SECRET=$(cat /root/secret)

UPLOAD_URL=$(echo $LOG_UPLOAD_URL | sed "s#\$LOG_ENDPOINT#$LOG_ENDPOINT#g;s/\$LOG_BOX_ID/$LOG_BOX_ID/g;s/\$LOG_BOX_SECRET/$LOG_BOX_SECRET/g;")

echo Uploading to $UPLOAD_URL

# curl
CURL_CMD="curl -s -o /dev/null -w '%{http_code}' -X POST -H 'Expect: 100-continue' -H 'Content-Type: application/octet-stream' -H 'Content-Disposition: attachment; filename=\"$UPLOAD_FILENAME\"' --data-binary \"@$UPLOAD_FILE\" \"$UPLOAD_URL\" 2>$LOG_TEMP_DIR/curl.log"

STATUS_CODE=$(eval $CURL_CMD)

if [ "200" == "$STATUS_CODE" ]
then
    echo Upload successful. File $UPLOAD_FILE
    rm $UPLOAD_FILE
elif [ "429" == $"STATUS_CODE" ]
then
    echo Warning upload limit exceeded. Removing file $UPLOAD_FILE
    rm $UPLOAD_FILE
else
    echo Warning uploading $UPLOAD_FILE failed with $STATUS_CODE $(cat $LOG_TEMP_DIR/curl.log)
fi
