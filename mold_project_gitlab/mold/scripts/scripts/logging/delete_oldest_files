#!/bin/bash

# Utility script which deletes the oldest files and directories inside a directory until 
# the space used by that directory is less than a threshold
DIRECTORY=$1
MAX_BYTES=$2

# trim whitespace from direcory
DIRECTORY=$(echo -e "${DIRECTORY}" | tr -d '[:space:]')

# check if directory is empty or root, which would be dangerous
if [ -z "$DIRECTORY" ]
then
    echo "delete_oldest_files: Directory not set."
    exit 1
fi

# get absolute path
DIRECTORY=$(readlink -f "$DIRECTORY")

# we don't want to delete the root directory or a directory at the first layer below that, 
# so we expect at least two slashes
NUM_SLASHES=$(echo $DIRECTORY | awk -F "/" '{ print NF-1 }')
if [ $NUM_SLASHES -lt 2 ]
then
    echo "delete_oldest_files: Too less slashes in directory $DIRECTORY. Stopping for security reasons."
    exit 2
fi

DIR_SIZE=$(du "$DIRECTORY" -s -B 1 | awk '{print $1}')
while [ $DIR_SIZE -gt $MAX_BYTES ]
do
    echo "Directory size $DIR_SIZE is larger than $MAX_BYTES, trying to delete a file or directory"
    OLDEST_SUBDIRECTORY_OR_FILE=$DIRECTORY/$(ls $"$DIRECTORY" -t | tail -n 1)
    # Log this as warning, so deletion of logfiles is always recorded and transmitted
    echo "Warning removing old file $OLDEST_SUBDIRECTORY_OR_FILE"
    rm -rf $OLDEST_SUBDIRECTORY_OR_FILE
    DIR_SIZE=$(du "$DIRECTORY" -s -B 1 | awk '{print $1}')
done
